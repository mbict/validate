package validate_test

import (
	validate "github.com/mbict/go-validate"
	. "gopkg.in/check.v1"
)

type BuiltinSuite struct{}

var _ = Suite(&BuiltinSuite{})

func (s *BuiltinSuite) TestRequired(c *C) {
	c.Check(validate.Valid(string(""), "required"), ErrorMatches, "required")
	c.Check(validate.Valid([]int{}, "required"), ErrorMatches, "required")
	c.Check(validate.Valid(map[int]int{}, "required"), ErrorMatches, "required")
	c.Check(validate.Valid(int(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(int8(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(int16(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(int32(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(int64(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(uint(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(uint8(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(uint16(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(uint32(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(uint64(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(uintptr(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(float32(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(float64(0), "required"), ErrorMatches, "required")
	c.Check(validate.Valid(bool(false), "required"), ErrorMatches, "required")

	c.Check(validate.Valid(string("abc"), "required"), IsNil)
	c.Check(validate.Valid([]int{1, 2, 3}, "required"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3}, "required"), IsNil)
	c.Check(validate.Valid(int(-1), "required"), IsNil)
	c.Check(validate.Valid(int8(-1), "required"), IsNil)
	c.Check(validate.Valid(int16(-1), "required"), IsNil)
	c.Check(validate.Valid(int32(-1), "required"), IsNil)
	c.Check(validate.Valid(int64(-1), "required"), IsNil)
	c.Check(validate.Valid(int(1), "required"), IsNil)
	c.Check(validate.Valid(int8(1), "required"), IsNil)
	c.Check(validate.Valid(int16(1), "required"), IsNil)
	c.Check(validate.Valid(int32(1), "required"), IsNil)
	c.Check(validate.Valid(int64(1), "required"), IsNil)
	c.Check(validate.Valid(uint(1), "required"), IsNil)
	c.Check(validate.Valid(uint8(1), "required"), IsNil)
	c.Check(validate.Valid(uint16(1), "required"), IsNil)
	c.Check(validate.Valid(uint32(1), "required"), IsNil)
	c.Check(validate.Valid(uint64(1), "required"), IsNil)
	c.Check(validate.Valid(uintptr(1), "required"), IsNil)
	c.Check(validate.Valid(float32(1.1), "required"), IsNil)
	c.Check(validate.Valid(float64(1.1), "required"), IsNil)
	c.Check(validate.Valid(bool(true), "required"), IsNil)

	c.Check(validate.Valid(complex(0, 0), "required"), ErrorMatches, "unsupported type")
}

// Omitempty is a special case validator
func (s *BuiltinSuite) TestOmitempty(c *C) {
	c.Check(validate.Valid(string(""), "omitempty,required"), IsNil)
	c.Check(validate.Valid([]int{}, "omitempty,required"), IsNil)
	c.Check(validate.Valid(map[int]int{}, "omitempty,required"), IsNil)
	c.Check(validate.Valid(int(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int8(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int16(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int32(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int64(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint8(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint16(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint32(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint64(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uintptr(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(float32(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(float64(0), "omitempty,required"), IsNil)
	c.Check(validate.Valid(bool(false), "omitempty,required"), IsNil)

	c.Check(validate.Valid(string("abc"), "omitempty,required"), IsNil)
	c.Check(validate.Valid([]int{1, 2, 3}, "omitempty,required"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3}, "omitempty,required"), IsNil)
	c.Check(validate.Valid(int(-1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int8(-1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int16(-1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int32(-1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int64(-1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int8(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int16(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int32(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(int64(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint8(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint16(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint32(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uint64(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(uintptr(1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(float32(1.1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(float64(1.1), "omitempty,required"), IsNil)
	c.Check(validate.Valid(bool(true), "omitempty,required"), IsNil)
	c.Check(validate.Valid(string(""), "omitempty,min(10)"), IsNil)
	c.Check(validate.Valid([]int{}, "omitempty,min(10)"), IsNil)
	c.Check(validate.Valid(map[int]int{}, "omitempty,min(10)"), IsNil)

	c.Check(validate.Valid(string("abcde"), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid([]int{1, 2, 3, 4, 5}, "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(map[int]int{1: 2, 3: 4, 5: 6}, "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int8(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int16(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int32(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int64(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint8(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint16(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint32(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint64(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uintptr(5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(float32(5.5), "omitempty,min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(float64(5.5), "omitempty,min(10)"), ErrorMatches, "less than min")

	c.Check(validate.Valid(complex(0, 0), "omitempty,required"), ErrorMatches, "unsupported type, unsupported type")

}

func (s *BuiltinSuite) TestRegexp(c *C) {
	c.Check(validate.Valid(string("abc$"), `regexp("^(ab)+$")`), ErrorMatches, "regular expression mismatch")
	c.Check(validate.Valid(string("&123"), `regexp("^(ab)+$")`), ErrorMatches, "regular expression mismatch")
	c.Check(validate.Valid(string(""), `regexp("^(ab)+$")`), ErrorMatches, "regular expression mismatch")

	//a match
	c.Check(validate.Valid(string("abab"), `regexp("^(ab)+$")`), IsNil)

	c.Check(validate.Valid(string(""), "regexp()"), ErrorMatches, "invalid parameter count")
	c.Check(validate.Valid(string(""), "regexp(5,6)"), ErrorMatches, "invalid parameter count")

	c.Check(validate.Valid(string("foo"), `regexp("ab(cd")`), ErrorMatches, "bad parameter")

	c.Check(validate.Valid(string("foo"), "regexp(1234)"), ErrorMatches, "regular expression mismatch")
	c.Check(validate.Valid(string("foo"), `regexp("a.b")`), ErrorMatches, "regular expression mismatch")

	c.Check(validate.Valid(int(1), `regexp("")`), ErrorMatches, "unsupported type")
	c.Check(validate.Valid(bool(true), `regexp("")`), ErrorMatches, "unsupported type")
}

func (s *BuiltinSuite) TestMin(c *C) {
	c.Check(validate.Valid(string(""), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(string("abcde"), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid([]int{}, "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid([]int{1, 2, 3, 4, 5}, "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(map[int]int{}, "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(map[int]int{1: 2, 3: 4, 5: 6}, "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int8(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int16(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int32(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(int64(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint8(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint16(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint32(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uint64(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(uintptr(5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(float32(5.5), "min(10)"), ErrorMatches, "less than min")
	c.Check(validate.Valid(float64(5.5), "min(10)"), ErrorMatches, "less than min")

	c.Check(validate.Valid(string("abcde"), "min(5)"), IsNil)
	c.Check(validate.Valid([]int{1, 2}, "min(2)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2}, "min(2)"), IsNil)
	c.Check(validate.Valid(int(5), "min(5)"), IsNil)
	c.Check(validate.Valid(int8(5), "min(5)"), IsNil)
	c.Check(validate.Valid(int16(5), "min(5)"), IsNil)
	c.Check(validate.Valid(int32(5), "min(5)"), IsNil)
	c.Check(validate.Valid(int64(5), "min(5)"), IsNil)
	c.Check(validate.Valid(int(5), "min(5)"), IsNil)
	c.Check(validate.Valid(int8(5), "min(5)"), IsNil)
	c.Check(validate.Valid(int16(5), "min(5)"), IsNil)
	c.Check(validate.Valid(int32(5), "min(5)"), IsNil)
	c.Check(validate.Valid(int64(5), "min(5)"), IsNil)
	c.Check(validate.Valid(uint(5), "min(5)"), IsNil)
	c.Check(validate.Valid(uint8(5), "min(5)"), IsNil)
	c.Check(validate.Valid(uint16(5), "min(5)"), IsNil)
	c.Check(validate.Valid(uint32(5), "min(5)"), IsNil)
	c.Check(validate.Valid(uint64(5), "min(5)"), IsNil)
	c.Check(validate.Valid(uintptr(5), "min(5)"), IsNil)
	c.Check(validate.Valid(float32(5), "min(5)"), IsNil)
	c.Check(validate.Valid(float32(5.10001), "min(5.10000)"), IsNil)
	c.Check(validate.Valid(float64(5), "min(5)"), IsNil)
	c.Check(validate.Valid(float64(5.10001), "min(5.10000)"), IsNil)

	c.Check(validate.Valid(string("foo"), "min()"), ErrorMatches, "invalid parameter count")
	c.Check(validate.Valid(string("foo"), "min(5,6)"), ErrorMatches, "invalid parameter count")

	c.Check(validate.Valid(string("foo"), "min(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(int(1), "min(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(uint(1), "min(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid([]int{}, "min(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(float32(1), "min(\"test\")"), ErrorMatches, "bad parameter")

	c.Check(validate.Valid(bool(false), "min(5)"), ErrorMatches, "unsupported type")
	c.Check(validate.Valid(bool(true), "min(5)"), ErrorMatches, "unsupported type")
}

func (s *BuiltinSuite) TestMax(c *C) {
	c.Check(validate.Valid(string("abc"), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid([]int{1, 2, 3, 4, 5}, "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(map[int]int{1: 2, 3: 4, 5: 6}, "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(int(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(int8(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(int16(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(int32(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(int64(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(uint(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(uint8(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(uint16(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(uint32(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(uint64(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(uintptr(5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(float32(5.5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(float32(5.5), "max(2.5)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(float64(5.5), "max(2)"), ErrorMatches, "greater than max")
	c.Check(validate.Valid(float64(5.5), "max(2.5)"), ErrorMatches, "greater than max")

	c.Check(validate.Valid(string("abcde"), "max(5)"), IsNil)
	c.Check(validate.Valid(string(""), "max(5)"), IsNil)
	c.Check(validate.Valid([]int{}, "max(2)"), IsNil)
	c.Check(validate.Valid([]int{1, 2}, "max(2)"), IsNil)
	c.Check(validate.Valid(map[int]int{}, "max(2)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2}, "max(2)"), IsNil)
	c.Check(validate.Valid(int(5), "max(5)"), IsNil)
	c.Check(validate.Valid(int8(5), "max(5)"), IsNil)
	c.Check(validate.Valid(int16(5), "max(5)"), IsNil)
	c.Check(validate.Valid(int32(5), "max(5)"), IsNil)
	c.Check(validate.Valid(int64(5), "max(5)"), IsNil)
	c.Check(validate.Valid(int(5), "max(5)"), IsNil)
	c.Check(validate.Valid(int8(5), "max(5)"), IsNil)
	c.Check(validate.Valid(int16(5), "max(5)"), IsNil)
	c.Check(validate.Valid(int32(5), "max(5)"), IsNil)
	c.Check(validate.Valid(int64(5), "max(5)"), IsNil)
	c.Check(validate.Valid(uint(5), "max(5)"), IsNil)
	c.Check(validate.Valid(uint8(5), "max(5)"), IsNil)
	c.Check(validate.Valid(uint16(5), "max(5)"), IsNil)
	c.Check(validate.Valid(uint32(5), "max(5)"), IsNil)
	c.Check(validate.Valid(uint64(5), "max(5)"), IsNil)
	c.Check(validate.Valid(uintptr(5), "max(5)"), IsNil)
	c.Check(validate.Valid(float32(5), "max(5)"), IsNil)
	c.Check(validate.Valid(float32(5.09999), "max(5.10000)"), IsNil)
	c.Check(validate.Valid(float64(5), "max(5)"), IsNil)
	c.Check(validate.Valid(float64(5.09999), "max(5.10000)"), IsNil)

	c.Check(validate.Valid(string("foo"), "max()"), ErrorMatches, "invalid parameter count")
	c.Check(validate.Valid(string("foo"), "max(5,6)"), ErrorMatches, "invalid parameter count")

	c.Check(validate.Valid(string("foo"), "max(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(int(1), "max(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(uint(1), "max(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid([]int{}, "max(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(float32(1), "max(\"test\")"), ErrorMatches, "bad parameter")

	c.Check(validate.Valid(bool(false), "max(5)"), ErrorMatches, "unsupported type")
	c.Check(validate.Valid(bool(true), "max(5)"), ErrorMatches, "unsupported type")
}

func (s *BuiltinSuite) TestLen(c *C) {
	c.Check(validate.Valid(string(""), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(string("abc"), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid([]int{}, "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid([]int{1, 2, 3}, "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(map[int]int{}, "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(map[int]int{1: 2}, "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(int(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(int8(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(int16(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(int32(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(int64(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(uint(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(uint8(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(uint16(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(uint32(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(uint64(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(uintptr(5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(float32(5.5), "len(2)"), ErrorMatches, "invalid length")
	c.Check(validate.Valid(float64(5.5), "len(2)"), ErrorMatches, "invalid length")

	c.Check(validate.Valid(string("ab"), "len(2)"), IsNil)
	c.Check(validate.Valid([]int{1, 2}, "len(2)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 2, 3: 4}, "len(2)"), IsNil)
	c.Check(validate.Valid(int(2), "len(2)"), IsNil)
	c.Check(validate.Valid(int8(2), "len(2)"), IsNil)
	c.Check(validate.Valid(int16(2), "len(2)"), IsNil)
	c.Check(validate.Valid(int32(2), "len(2)"), IsNil)
	c.Check(validate.Valid(int64(2), "len(2)"), IsNil)
	c.Check(validate.Valid(uint(2), "len(2)"), IsNil)
	c.Check(validate.Valid(uint8(2), "len(2)"), IsNil)
	c.Check(validate.Valid(uint16(2), "len(2)"), IsNil)
	c.Check(validate.Valid(uint32(2), "len(2)"), IsNil)
	c.Check(validate.Valid(uint64(2), "len(2)"), IsNil)
	c.Check(validate.Valid(uintptr(2), "len(2)"), IsNil)
	c.Check(validate.Valid(float32(2.5), "len(2.5)"), IsNil)
	c.Check(validate.Valid(float64(2.5), "len(2.5)"), IsNil)

	c.Check(validate.Valid(string("foo"), "len()"), ErrorMatches, "invalid parameter count")
	c.Check(validate.Valid(string("foo"), "len(5,6)"), ErrorMatches, "invalid parameter count")

	c.Check(validate.Valid(string("foo"), "len(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(int(1), "len(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(uint(1), "len(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid([]int{}, "len(\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(float32(1), "len(\"test\")"), ErrorMatches, "bad parameter")

	c.Check(validate.Valid(bool(false), "len(5)"), ErrorMatches, "unsupported type")
	c.Check(validate.Valid(bool(true), "len(5)"), ErrorMatches, "unsupported type")
}

func (s *BuiltinSuite) TestBetween(c *C) {
	c.Check(validate.Valid(string("a"), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(string("abcdef"), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid([]int{}, "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid([]int{1}, "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid([]int{1, 2, 3, 4, 5, 6}, "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(map[int]int{}, "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(map[int]int{1: 1}, "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3, 4: 4}, "between(2,3)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int8(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int8(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int16(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int16(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int32(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int32(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int64(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int64(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint8(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint8(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint16(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint16(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint32(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint32(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint64(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint64(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uintptr(1), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uintptr(6), "between(2,5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(float32(2.4), "between(2.5,5.5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(float32(5.6), "between(2.5,5.5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(float64(2.4), "between(2.5,5.5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(float64(5.6), "between(2.5,5.5)"), ErrorMatches, "not between")

	//inversed arguments
	c.Check(validate.Valid(string("a"), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(string("abcdef"), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid([]int{}, "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid([]int{1}, "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid([]int{1, 2, 3, 4, 5, 6}, "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(map[int]int{}, "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(map[int]int{1: 1}, "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3, 4: 4}, "between(3,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int8(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int8(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int16(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int16(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int32(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int32(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int64(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(int64(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint8(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint8(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint16(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint16(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint32(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint32(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint64(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uint64(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uintptr(1), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(uintptr(6), "between(5,2)"), ErrorMatches, "not between")
	c.Check(validate.Valid(float32(2.4), "between(5.5,2.5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(float32(5.6), "between(5.5,2.5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(float64(2.4), "between(5.5,2.5)"), ErrorMatches, "not between")
	c.Check(validate.Valid(float64(5.6), "between(5.5,2.5)"), ErrorMatches, "not between")

	c.Check(validate.Valid(string("abcde"), "between(2,5)"), IsNil)
	c.Check(validate.Valid(string("ab"), "between(2,5)"), IsNil)
	c.Check(validate.Valid([]int{1, 2}, "between(2,5)"), IsNil)
	c.Check(validate.Valid([]int{1, 2, 3, 4, 5}, "between(2,5)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2}, "between(2,5)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, "between(2,5)"), IsNil)
	c.Check(validate.Valid(int(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int8(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int8(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int16(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int16(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int32(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int32(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int64(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int64(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int8(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int8(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int16(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int16(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int32(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int32(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int64(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(int64(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint8(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint8(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint16(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint16(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint32(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint32(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint64(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uint64(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uintptr(2), "between(2,5)"), IsNil)
	c.Check(validate.Valid(uintptr(5), "between(2,5)"), IsNil)
	c.Check(validate.Valid(float32(2.5001), "between(2,5)"), IsNil)
	c.Check(validate.Valid(float32(4.49), "between(2.5, 4.5)"), IsNil)
	c.Check(validate.Valid(float64(2.1), "between(2.1,5.1)"), IsNil)
	c.Check(validate.Valid(float64(5), "between(2.5, 5.1)"), IsNil)

	//inversed argumetns
	c.Check(validate.Valid(string("abcde"), "between(5,2)"), IsNil)
	c.Check(validate.Valid(string("ab"), "between(5,2)"), IsNil)
	c.Check(validate.Valid([]int{1, 2}, "between(5,2)"), IsNil)
	c.Check(validate.Valid([]int{1, 2, 3, 4, 5}, "between(5,2)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2}, "between(5,2)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, "between(5,2)"), IsNil)
	c.Check(validate.Valid(int(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int8(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int8(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int16(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int16(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int32(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int32(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int64(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int64(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int8(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int8(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int16(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int16(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int32(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int32(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int64(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(int64(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint8(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint8(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint16(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint16(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint32(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint32(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint64(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uint64(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uintptr(2), "between(5,2)"), IsNil)
	c.Check(validate.Valid(uintptr(5), "between(5,2)"), IsNil)
	c.Check(validate.Valid(float32(2.5001), "between(5,2)"), IsNil)
	c.Check(validate.Valid(float32(4.49), "between(4.5, 2.5)"), IsNil)
	c.Check(validate.Valid(float64(2.1), "between(5.1,2.0)"), IsNil)
	c.Check(validate.Valid(float64(5), "between(5.5, 2.1)"), IsNil)

	c.Check(validate.Valid(string("foo"), "between()"), ErrorMatches, "invalid parameter count")
	c.Check(validate.Valid(string("foo"), "between(1)"), ErrorMatches, "invalid parameter count")
	c.Check(validate.Valid(string("foo"), "between(5,6,7)"), ErrorMatches, "invalid parameter count")

	//1st param
	c.Check(validate.Valid(string("foo"), "between(\"test\",1)"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(int(1), "between(\"test\",1)"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(uint(1), "between(\"test\",1)"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid([]int{}, "between(\"test\",1)"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(float32(1), "between(\"test\",1)"), ErrorMatches, "bad parameter")

	//2nd param
	c.Check(validate.Valid(string("foo"), "between(1,\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(int(1), "between(1,\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(uint(1), "between(1,\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid([]int{}, "between(1,\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(float32(1), "between(1,\"test\")"), ErrorMatches, "bad parameter")

	c.Check(validate.Valid(bool(false), "between(1,2)"), ErrorMatches, "unsupported type")
	c.Check(validate.Valid(bool(true), "between(1,2)"), ErrorMatches, "unsupported type")
}

func (s *BuiltinSuite) TestAround(c *C) {
	c.Check(validate.Valid(string("abc"), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(string("abcd"), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid([]int{1, 2, 3}, "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid([]int{1, 2, 3, 4}, "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3}, "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3, 4: 4}, "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int8(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int8(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int16(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int16(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int32(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int32(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int64(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int64(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint8(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint8(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint16(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint16(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint32(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint32(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint64(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint64(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uintptr(3), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uintptr(4), "around(2,5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(float32(2.6), "around(2.5,5.5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(float32(5.4), "around(2.5,5.5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(float64(2.6), "around(2.5,5.5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(float64(5.4), "around(2.5,5.5)"), ErrorMatches, "not around")

	//inverse params
	c.Check(validate.Valid(string("abc"), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(string("abcd"), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid([]int{1, 2, 3}, "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid([]int{1, 2, 3, 4}, "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3}, "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3, 4: 4}, "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int8(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int8(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int16(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int16(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int32(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int32(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int64(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(int64(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint8(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint8(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint16(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint16(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint32(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint32(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint64(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uint64(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uintptr(3), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(uintptr(4), "around(5,2)"), ErrorMatches, "not around")
	c.Check(validate.Valid(float32(2.6), "around(5.5,2.5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(float32(5.4), "around(5.5,2.5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(float64(2.6), "around(5.5,2.5)"), ErrorMatches, "not around")
	c.Check(validate.Valid(float64(5.4), "around(5.5,2.5)"), ErrorMatches, "not around")

	c.Check(validate.Valid(string(""), "around(2,5)"), IsNil)
	c.Check(validate.Valid(string("ab"), "around(2,5)"), IsNil)
	c.Check(validate.Valid(string("abcdef"), "around(2,5)"), IsNil)
	c.Check(validate.Valid([]int{}, "around(2,5)"), IsNil)
	c.Check(validate.Valid([]int{1}, "around(2,5)"), IsNil)
	c.Check(validate.Valid([]int{1, 2}, "around(2,5)"), IsNil)
	c.Check(validate.Valid([]int{1, 2, 3, 4, 5}, "around(2,5)"), IsNil)
	c.Check(validate.Valid(map[int]int{}, "around(2,5)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2}, "around(2,5)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, "around(2,5)"), IsNil)
	c.Check(validate.Valid(int(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int8(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int8(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int16(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int16(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int32(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int32(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int64(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int64(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int8(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int8(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int16(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int16(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int32(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int32(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int64(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(int64(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint8(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint8(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint16(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint16(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint32(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint32(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint64(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uint64(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uintptr(2), "around(2,5)"), IsNil)
	c.Check(validate.Valid(uintptr(5), "around(2,5)"), IsNil)
	c.Check(validate.Valid(float32(1.9), "around(2,5)"), IsNil)
	c.Check(validate.Valid(float32(4.51), "around(2.5, 4.5)"), IsNil)
	c.Check(validate.Valid(float64(2.099), "around(2.1,5.1)"), IsNil)
	c.Check(validate.Valid(float64(5.1001), "around(2.5, 5.1)"), IsNil)

	c.Check(validate.Valid(string(""), "around(5,2)"), IsNil)
	c.Check(validate.Valid(string("ab"), "around(5,2)"), IsNil)
	c.Check(validate.Valid(string("abcdef"), "around(5,2)"), IsNil)
	c.Check(validate.Valid([]int{}, "around(5,2)"), IsNil)
	c.Check(validate.Valid([]int{1}, "around(5,2)"), IsNil)
	c.Check(validate.Valid([]int{1, 2}, "around(5,2)"), IsNil)
	c.Check(validate.Valid([]int{1, 2, 3, 4, 5}, "around(5,2)"), IsNil)
	c.Check(validate.Valid(map[int]int{}, "around(5,2)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2}, "around(5,2)"), IsNil)
	c.Check(validate.Valid(map[int]int{1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, "around(5,2)"), IsNil)
	c.Check(validate.Valid(int(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int8(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int8(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int16(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int16(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int32(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int32(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int64(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int64(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int8(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int8(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int16(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int16(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int32(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int32(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int64(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(int64(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint8(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint8(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint16(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint16(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint32(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint32(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint64(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uint64(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uintptr(2), "around(5,2)"), IsNil)
	c.Check(validate.Valid(uintptr(5), "around(5,2)"), IsNil)
	c.Check(validate.Valid(float32(1.9), "around(5,2)"), IsNil)
	c.Check(validate.Valid(float32(4.51), "around(4.5,2.5)"), IsNil)
	c.Check(validate.Valid(float64(2.099), "around(5.1, 2.1)"), IsNil)
	c.Check(validate.Valid(float64(5.1001), "around(5.1, 2.5)"), IsNil)

	c.Check(validate.Valid(string("foo"), "around()"), ErrorMatches, "invalid parameter count")
	c.Check(validate.Valid(string("foo"), "around(1)"), ErrorMatches, "invalid parameter count")
	c.Check(validate.Valid(string("foo"), "around(5,6,7)"), ErrorMatches, "invalid parameter count")

	//1st param
	c.Check(validate.Valid(string("foo"), "around(\"test\",1)"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(int(1), "around(\"test\",1)"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(uint(1), "around(\"test\",1)"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid([]int{}, "around(\"test\",1)"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(float32(1), "around(\"test\",1)"), ErrorMatches, "bad parameter")

	//2nd param
	c.Check(validate.Valid(string("foo"), "around(1,\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(int(1), "around(1,\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(uint(1), "around(1,\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid([]int{}, "around(1,\"test\")"), ErrorMatches, "bad parameter")
	c.Check(validate.Valid(float32(1), "around(1,\"test\")"), ErrorMatches, "bad parameter")

	c.Check(validate.Valid(bool(false), "around(1,2)"), ErrorMatches, "unsupported type")
	c.Check(validate.Valid(bool(true), "around(1,2)"), ErrorMatches, "unsupported type")
}

func (s *BuiltinSuite) TestEmail(c *C) {
	c.Check(validate.Valid(string(""), "email"), ErrorMatches, "invalid email")
	c.Check(validate.Valid(string("test.com"), "email"), ErrorMatches, "invalid email")
	c.Check(validate.Valid(int(0), "email"), ErrorMatches, "unsupported type")

	c.Check(validate.Valid(string("test@test.com"), "email"), IsNil)
}

func (s *BuiltinSuite) TestUrl(c *C) {
	c.Check(validate.Valid(string(""), "url"), ErrorMatches, "invalid url")
	c.Check(validate.Valid(string("test.com"), "url"), ErrorMatches, "invalid url")
	c.Check(validate.Valid(int(0), "url"), ErrorMatches, "unsupported type")

	c.Check(validate.Valid(string("http://test.com"), "url"), IsNil)
	c.Check(validate.Valid(string("https://www.test.com"), "url"), IsNil)
	c.Check(validate.Valid(string("http://xyz.test.com/test/abc"), "url"), IsNil)
	c.Check(validate.Valid(string("http://xyz.test.com:8080/test/abc"), "url"), IsNil)
	c.Check(validate.Valid(string("http://xyz.test.com/test/?foo=1234bar=3434"), "url"), IsNil)
	c.Check(validate.Valid(string("http://xyz.test.com/test/#a"), "url"), IsNil)
}

func (s *BuiltinSuite) TestAlphaDash(c *C) {
	c.Check(validate.Valid(string("1.a%~!@#$%^&*()"), "alpha_dash"), ErrorMatches, "alpha dash mismatch")
	c.Check(validate.Valid(int(0), "alpha_dash"), ErrorMatches, "unsupported type")

	c.Check(validate.Valid(string(""), "alpha_dash"), IsNil)
	c.Check(validate.Valid(string("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"), "alpha_dash"), IsNil)
}

func (s *BuiltinSuite) TestAlphaDashDot(c *C) {
	c.Check(validate.Valid(string("1a%~!@#$%^&*()"), "alpha_dash_dot"), ErrorMatches, "alpha dash dot mismatch")
	c.Check(validate.Valid(int(0), "alpha_dash_dot"), ErrorMatches, "unsupported type")

	c.Check(validate.Valid(string(""), "alpha_dash_dot"), IsNil)
	c.Check(validate.Valid(string("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_"), "alpha_dash_dot"), IsNil)
}

func (s *BuiltinSuite) TestInclude(c *C) {
	c.Check(validate.Valid(string(""), "in(foo,bar)"), ErrorMatches, validate.ErrInclude.Error())
	c.Check(validate.Valid(string("baz"), "in(foo,bar)"), ErrorMatches, validate.ErrInclude.Error())

	c.Check(validate.Valid(string("foo"), "in(foo,bar)"), IsNil)
	c.Check(validate.Valid(string("bar"), "in(foo,bar)"), IsNil)
}

func (s *BuiltinSuite) TestExclude(c *C) {
	c.Check(validate.Valid(string("foo"), "exclude(foo,bar)"), ErrorMatches, validate.ErrExclude.Error())
	c.Check(validate.Valid(string("bar"), "exclude(foo,bar)"), ErrorMatches, validate.ErrExclude.Error())

	c.Check(validate.Valid(string(""), "exclude(foo,bar)"), IsNil)
	c.Check(validate.Valid(string("baz"), "exclude(foo,bar)"), IsNil)
}

func (s *BuiltinSuite) TestEnum(c *C) {
	c.Check(validate.Valid(string(""), "enum(aa,bb,cc)"), ErrorMatches, "invalid value")
	c.Check(validate.Valid(string("test.com"), "enum(aa,bb,cc)"), ErrorMatches, "invalid value")
	c.Check(validate.Valid([]string{""}, "enum(aa,bb,cc)"), ErrorMatches, "invalid value")
	c.Check(validate.Valid([]string{"test.com"}, "enum(aa,bb,cc)"), ErrorMatches, "invalid value")
	c.Check(validate.Valid(int(0), "enum(aa,bb,cc)"), ErrorMatches, "unsupported type")


	c.Check(validate.Valid(string("bb"), "enum(aa,bb,cc)"), IsNil)
	c.Check(validate.Valid([]string{"bb","aa"}, "enum(aa,bb,cc)"), IsNil)
	c.Check(validate.Valid([]string{}, "enum(aa,bb,cc)"), IsNil)
}